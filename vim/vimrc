""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Initialization
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! BuildYouCompleteMe(info)
  if a:info.force || a:info.status !=? 'unchanged'
    silent !./install.py --clang-completer --racer-completer --tern-completer
    redraw!
  end
endfunction

function! BuildCommandT(info)
  if a:info.force || a:info.status !=? 'unchanged'
    silent !builtin cd ruby/command-t/ext/command-t && ruby extconf.rb && make
    redraw!
  end
endfunction

" Initialize Plug.
call plug#begin()

" Add your list of plugins here.
Plug 'PeterRincker/vim-argumentative' " Rearrange function arguments
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYouCompleteMe') } " Autocompletion and code fixes
Plug 'Xuyuanp/nerdtree-git-plugin' " Git integration with nerdtree
Plug 'airblade/vim-gitgutter' " Show git diff in the gutter
Plug 'altercation/vim-colors-solarized' " Solarized color theme for vim
Plug 'editorconfig/editorconfig-vim' " Editorconfig integration
Plug 'google/vim-codefmt' " Syntax-aware code formatting
Plug 'google/vim-glaive' " Configuration utility for maktaba
Plug 'google/vim-maktaba' " Plugin framework
Plug 'mhinz/vim-grepper' " Sync grep within vim
Plug 'powerline/fonts' " Pre-patched and adjusted fonts for status line
Plug 'scrooloose/nerdtree' " File navigation
Plug 'tpope/vim-abolish' " Assorted word-munging utilities
Plug 'tpope/vim-commentary' " Easy (un)commenting of code blocks
Plug 'tpope/vim-fugitive' " Integrated git commands
Plug 'tpope/vim-obsession' " Intelligent and automatic session management
Plug 'tpope/vim-repeat' " Better command classification for `.`
Plug 'tpope/vim-rhubarb' " GitHub integration for fugitive
Plug 'tpope/vim-surround' " Easily manipulate surrounding symbols
Plug 'vim-airline/vim-airline' " Better status line
Plug 'vim-airline/vim-airline-themes' " Color theme support for airline
Plug 'vim-syntastic/syntastic' " Syntax checking for several common languages
Plug 'vim-utils/vim-man' " Open man pages in vim
Plug 'vim-utils/vim-troll-stopper' " Convert elusive unicode characters to ASCII
Plug 'wincent/command-t', { 'do': function('BuildCommandT') } " Fuzzy file finder

" All of your Plugins must be added before the following line.
call plug#end()
call glaive#Install()

" Behavior of several plugins depends on filetype being set. Setting it early
" helps get consistent behavior from them.
augroup FileTypeAssociation
  autocmd!
  autocmd BufNewFile,BufRead *.impl,*.inl set filetype=cpp
  autocmd BufNewFile,BufRead *.launch set filetype=xml
  autocmd BufNewFile,BufRead *.make set filetype=make
  autocmd BufNewFile,BufRead *.bzl set filetype=python
  autocmd BufNewFile,BufRead WORKSPACE,BUILD,BUILD.*,*.BUILD set filetype=bzl
  autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby
augroup END

" Use , instead of \ for the map leader.
" Several mappings calculate the value of <Leader> when they are defined.
" Setting it early prevents them from using the default value.
let g:mapleader=','

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Airline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='solarized'
let g:airline_powerline_fonts = 1

" CodeFmt
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup AutoFormatSettings
  autocmd!
  autocmd FileType bzl let b:codefmt_formatter='buildifier'
  autocmd FileType c,cpp,java,javascript,typescript,proto let b:codefmt_formatter='clang-format'
  autocmd FileType css,html,json,xml let b:codefmt_formatter='js-beautify'
  autocmd FileType python let b:codefmt_formatter='yapf'
  autocmd BufNewFile,BufRead * :NoAutoFormatBuffer
augroup END

function! AutoFormatToggle()
  if !exists('b:toggle_auto_format')
    let b:toggle_auto_format=0
  endif

  if b:toggle_auto_format
    :echo 'Disabling auto-formatting'
    :NoAutoFormatBuffer
    let b:toggle_auto_format=0
  else
    :echo 'Enabling auto-formatting'
    :AutoFormatBuffer
    let b:toggle_auto_format=1
  endif
endfunction

" Manual formatting.
Glaive codefmt plugin[mappings]
nnoremap <Leader>f :call AutoFormatToggle()<CR>

" CommandT
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap <C-p> :CommandT

" EditorConfig
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:EditorConfig_exclude_patterns=['fugitive://.*']

" GitGutter
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:gitgutter_diff_args='--patience' " Add flags to git diff.
let g:gitgutter_eager=0 " Only redraw gutter on buffer save / open.

" Grepper
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Run grepper on motion and selection.
nnoremap gs <Plug>(GrepperOperator)
xnoremap gs <Plug>(GrepperOperator)

" NERDTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle NERDTree buffer.
nnoremap <Leader>t :NERDTreeToggle<CR>

" Syntastic
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Commands:
"   Errors               pop up location list and display errors
"   SyntasticToggleMode  toggles between active and passive mode
"   SyntasticCheck       forces a syntax check in passive mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:syntastic_check_on_open=1 " Check for syntax errors on file open.
let g:syntastic_echo_current_error=1 " Echo errors to the command window.
let g:syntastic_enable_signs=1 " Mark lines with errors and warnings.
let g:syntastic_enable_balloons=0 " Do not open error balloons over erroneous lines.
let g:syntastic_cpp_check_header=1 " YCM will provide context for C++ files.
let g:syntastic_c_check_header=1 " Same for C files.
let g:syntastic_python_checkers=['pep8']
let g:syntastic_vim_checkers = ['vint']

" TrollStopper
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup AutoTrollStopper
  autocmd!
  autocmd BufWritePre * silent! :TrollStop<CR>
augroup END

" YouCompleteMe
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Behavior
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always use Linux keybindings (even on Windows).
behave xterm
" Enable syntax highlighting.
if !exists('g:syntax_on')
  syntax enable
endif
" Load filetype files for default file types, custom file types, and file
" indentation rules.
filetype plugin indent on

" Treat all files like UTF-8.
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8

" Resize splits on window resize.
augroup AutoResizeSplits
  autocmd!
  autocmd VimResized * wincmd =
augroup END

" Options
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autowrite                   " Write before executing the 'make' command.
set backspace=indent,eol,start  " Allow <BS> to go over indents, eol, and start of insert.
set colorcolumn=80              " Highlight the 80th column.
set cpoptions+=$                " Show dollar sign at end of text to be changed.
set cursorline                  " Highlight current line.
set dictionary+=~/.vim/dictionary/english-freq
set expandtab                   " Expand tabs into spaces.
set foldcolumn=1                " Add N columns to show fold levels and boundaries.
set foldmethod=indent           " Set fold method (manual,indent,expr,syntax,diff,marker).
set hidden                      " Use hidden buffers so unsaved buffers can go to the background.
set history=500                 " Set number of lines for vim to remember.
set hlsearch                    " Highlight all search matches.
set ignorecase                  " Ignore case in regular expressions.
set incsearch                   " Immediately highlight search matches.
set laststatus=2                " Show status line even where there is only one window.
set lazyredraw                  " Redraw faster.
set linespace=0                 " Adjust relative line height.
set list                        " Enable listchars for undesireable whitespace and non-visible wrapped text.
set listchars=tab:➤-,trail:·,extends:»,precedes:«
set modeline                    " Check files for a modeline to apply config settings.
set nobomb                      " Remove Byte Order Mark from files.
set noerrorbells                " No beeps on errors.
set nofoldenable                " Do not open file folded.
set nopaste                     " Do not default to paste mode.
set noswapfile                  " Don't use swap files.
set number                      " Display line numbers.
set path=,,.,**,/usr/include,/usr/local/include
set scrolloff=5                 " Keep min of N lines above/below cursor.
set shellslash                  " Use forward slashes regardless of OS.
set shiftwidth=2                " Auto-indent N spaces each indent level.
set showcmd                     " Show partial commands in the status line.
set showmatch                   " Show matching () {} etc..
set showmode                    " Show current editor mode (insert, visual, replace, etc).
set sidescrolloff=10            " Keep min of N columns right/left cursor.
set smartcase                   " Searches are case-sensitive only if caps used.
set smartindent                 " Maintains most indentation and adds extra level when nesting.
set smarttab                    " Tabs and backspaces at the start of a line indent the line one level.
set softtabstop=2               " Using a TAB inserts N spaces.
set splitright splitbelow       " Open splits below and to the right.
set synmaxcol=2000              " Only matches syntax on first N columns of each line.
set tabstop=2                   " TABs expand to N spaces.
set textwidth=80                " Hard wrap at N characters.
set ttyfast                     " Smoother redrawing.
set viminfo='20,\"500,%         " Adjust viminfo contents.
set virtualedit=block           " Allow the cursor to move to columns without text.
set wildignore=*.sw?,*.pyc      " Ignore generated files in the source tree.
set wildignorecase              " Tab completion is case-insensitive.
set wildmenu                    " Tab completion navigable menu is enabled.
set wildmode=list:longest,full  " Tab completion lists matches, then opens wildmenu on next <Tab>.
set wrap                        " Soft wrap lines.
set wrapscan                    " Searching wraps to start of file when end is reached.

" Toggles for invertible settings.
nnoremap <Leader>h :set invhlsearch<CR>
nnoremap <Leader>n :set invnumber<CR>
nnoremap <Leader>p :set invpaste<CR>
nnoremap <Leader>w :set invwrap<CR>

" Completion settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options:
"   .        scan the current buffer ('wrapscan' is ignored)
"   w        scan buffers from other windows
"   b        scan other loaded buffers that are in the buffer list
"   u        scan the unloaded buffers that are in the buffer list
"   U        scan the buffers that are not in the buffer list
"   k        scan the files given with the 'dictionary' option
"   kspell   use the currently active spell checking |spell|
"   k{dict}  scan the file {dict}
"   s        scan the files given with the 'thesaurus' option
"   s{tsr}   scan the file {tsr}
"   i        scan current and included files
"   d        scan current and included files for defined name or macro |i_CTRL-X_CTRL-D|
"   t        tag completion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set complete=.,w,b,u,t,i
augroup ProseCompletion
  autocmd!
  autocmd FileType markdown,gitcommit,text setlocal complete+=k spell
augroup END

" Text formatting settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options:
"   t  Auto-wrap text using textwidth. (default)
"   c  Auto-wrap comments; insert comment leader. (default)
"   q  Allow formatting of comments with "gq". (default)
"   r  Insert comment leader after hitting <Enter>.
"   o  Insert comment leader after hitting 'o' or 'O' in command mode.
"   n  Auto-format lists, wrapping to text after the list bullet char.
"   l  Don't auto-wrap if a line is already longer than textwidth.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set formatoptions=tcqronl

" Enable mouse scrolling in selected modes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options:
"   a  All
"   c  Command
"   i  Insert
"   n  Normal
"   v  Visual
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set mouse=

" Color theme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256                  " Use as many colors as your terminal supports.
silent! colorscheme solarized " Must be silent so Plug does not fail when installing for the first time.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Basics
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Make y behave like all other capitals (yank to end of line).
nnoremap Y y$

" No one ever intends to enter ex-mode. Make it harder by rebinding to QQ.
nnoremap Q <nop>
nnoremap QQ Q

" Smash to exit insert mode because <Esc> is too far away from home row.
inoremap kj <Esc>

" Navigation
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use C-hjkl to change windows.
nnoremap <C-h> <C-w><Left>
nnoremap <C-j> <C-w><Down>
nnoremap <C-k> <C-w><Up>
nnoremap <C-l> <C-w><Right>

" Use C-t to change tabs.
nnoremap <C-t>e :tabnew<CR>
nnoremap <C-t>% :tabnew<Space>%<CR>
nnoremap <C-t>n :tabnext<CR>
nnoremap <C-t>p :tabprevious<CR>
nnoremap <C-t>d :tabclose<CR>

" C-hjkl navigation in insert mode.
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
