""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Initialization
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! InstallVimPlug() abort
  if empty(glob('~/.vim/autoload/plug.vim'))
    echo 'Downloading VimPlug'
    silent !wget --output-document ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    redraw!
  endif
endfunction

function! BuildYouCompleteMe(info) abort
  if a:info.force || a:info.status !=? 'unchanged'
    echo 'Building YouCompleteMe'
    silent !./install.py --clang-completer --racer-completer --tern-completer
    redraw!
  end
endfunction

function! BuildPowerlineFonts(info) abort
  if a:info.force || a:info.status !=? 'unchanged'
    echo 'Building PowerlineFonts'
    silent !./install.sh
    redraw!
  end
endfunction

function! BuildCommandT(info) abort
  if a:info.force || a:info.status !=? 'unchanged'
    echo 'Building CommandT'
    silent !builtin cd ruby/command-t/ext/command-t && ruby extconf.rb && make
    redraw!
  end
endfunction

" Initialize Plug.
call InstallVimPlug()
call plug#begin('~/.vim/plugged')

" Add your list of plugins here.
Plug 'Chiel92/vim-autoformat' " Syntax-aware code formatting
Plug 'PeterRincker/vim-argumentative' " Rearrange function arguments
Plug 'SirVer/ultisnips' " Code snippet completion
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYouCompleteMe') } " Autocompletion and code fixes
Plug 'Xuyuanp/nerdtree-git-plugin' " Git integration with nerdtree
Plug 'airblade/vim-gitgutter' " Show git diff in the gutter
Plug 'altercation/vim-colors-solarized' " Solarized color theme for vim
Plug 'cespare/vim-toml' " Toml syntax highlighting
Plug 'editorconfig/editorconfig-vim' " Editorconfig integration
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<Plug>(GrepperOperator)'] } " Integrate grep into quick-fix
Plug 'powerline/fonts', { 'do': function('BuildPowerlineFonts') } " Pre-patched and adjusted fonts for status line
Plug 'roxma/vim-tmux-clipboard' " Sync Vim and Tmux copy buffers
Plug 'rust-lang/rust.vim' " Rust syntax highlighting
Plug 'scrooloose/nerdtree' " File navigation
Plug 'tmux-plugins/vim-tmux' " Conveniences when editing Tmux configs
Plug 'tpope/vim-abolish' " Assorted word-munging utilities
Plug 'tpope/vim-commentary' " Easy (un)commenting of code blocks
Plug 'tpope/vim-fugitive' " Integrated git commands
Plug 'tpope/vim-obsession' " Intelligent and automatic session management
Plug 'tpope/vim-repeat' " Better command classification for `.`
Plug 'tpope/vim-rhubarb' " GitHub integration for fugitive
Plug 'tpope/vim-surround' " Easily manipulate surrounding symbols
Plug 'vim-airline/vim-airline' " Better status line
Plug 'vim-airline/vim-airline-themes' " Color theme support for airline
Plug 'vim-utils/vim-man' " Open man pages in vim
Plug 'vim-utils/vim-troll-stopper' " Convert elusive unicode characters to ASCII
Plug 'w0rp/ale' " Asynchronous Lint Engine
Plug 'wincent/command-t', { 'do': function('BuildCommandT') } " Fuzzy file finder

" All of your Plugins must be added before the following line.
call plug#end()

" Behavior of several plugins depends on filetype being set. Setting it early
" helps get consistent behavior from them.
augroup FileTypeAssociation
  autocmd!
  autocmd BufNewFile,BufRead *.impl,*.inl set filetype=cpp
  autocmd BufNewFile,BufRead *.launch set filetype=xml
  autocmd BufNewFile,BufRead *.make set filetype=make
  autocmd BufNewFile,BufRead *.snippets set filetype=snippets
  autocmd BufNewFile,BufRead *.bzl set filetype=python
  autocmd BufNewFile,BufRead WORKSPACE,BUILD,BUILD.*,*.BUILD set filetype=bzl
  autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby
augroup END

" Use , instead of \ for the map leader.
" Several mappings calculate the value of <Leader> when they are defined.
" Setting it early prevents them from using the default value.
let g:mapleader=','

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Airline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:airline#extensions#ale#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline_theme='solarized'
let g:airline_powerline_fonts=1

" ALE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:ale_completion_enabled=1

nmap <C-p> <Plug>(ale_previous_wrap)
nmap <C-n> <Plug>(ale_next_wrap)

" Argumentative
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap [; <Plug>Argumentative_Prev
nmap ]; <Plug>Argumentative_Next
xmap [; <Plug>Argumentative_XPrev
xmap ]; <Plug>Argumentative_XNext
nmap <; <Plug>Argumentative_MoveLeft
nmap >; <Plug>Argumentative_MoveRight
xmap i; <Plug>Argumentative_InnerTextObject
xmap a; <Plug>Argumentative_OuterTextObject
omap i; <Plug>Argumentative_OpPendingInnerTextObject
omap a; <Plug>Argumentative_OpPendingOuterTextObject

" Autoformat
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! AutoFormatToggle() abort
  if !exists('b:toggle_auto_format')
    let b:toggle_auto_format=0
  endif

  if b:toggle_auto_format
    :echo 'Disabling auto-formatting'
    let b:toggle_auto_format=0
  else
    :echo 'Enabling auto-formatting'
    let b:toggle_auto_format=1
  endif
endfunction

function! AutoFormatIfEnabled() abort
  if !exists('b:toggle_auto_format')
    let b:toggle_auto_format=0
  endif

  if b:toggle_auto_format
    :echo 'Auto-formatting buffer'
    :Autoformat
  endif
endfunction

" Filetype formatters.
let g:formatters_c=['clangformat']
let g:formatters_cpp=['clangformat']
let g:formatters_css=['cssbeautify']
let g:formatters_html=['htmlbeautify']
let g:formatters_javascript=['jsbeautify_javascript']
let g:formatters_json=['jsbeautify_json']
let g:formatters_markdown=['remark']
let g:formatters_protobuf=['clangformat']
let g:formatters_python=['yapf']
let g:formatters_ruby=['rubocop']
let g:formatters_rust=['rustfmt']
let g:formatters_scss=['cssbeautify']
let g:formatters_sh=['shfmt']
let g:formatters_xhtml=['htmlbeautify']
let g:formatters_xml=['htmlbeautify']

let g:formatdef_shfmt='"shfmt -s -i ".&shiftwidth'
let g:formatter_yapf_style='pep8'

" Automatic formatting.
augroup AutoFormatSettings
  autocmd!
  autocmd BufWritePre * call AutoFormatIfEnabled()
augroup END

" Manual formatting.
nnoremap <Leader>f :Autoformat<CR>
xnoremap <Leader>f :Autoformat<CR>
nnoremap <Leader>F :call AutoFormatToggle()<CR>

" Commentary
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup CommentStringSettings
  autocmd!
  autocmd FileType c,cpp,java setlocal commentstring=//\ %s
augroup END

" CommandT
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:CommandTFileScanner='git'

" Add mappings to close quickfix window.
let g:CommandTCancelMap=['<Esc>', '<C-c>']

nnoremap <C-f> :CommandT<CR>

" TODO: use `fd` as file scanner.
" This [open pull request](https://github.com/wincent/command-t/pull/258) may
" provide the needed configurability.

" EditorConfig
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:EditorConfig_exclude_patterns=['fugitive://.*']

" GitGutter
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:gitgutter_diff_args='--patience' " Add flags to git diff.
let g:gitgutter_eager=0 " Only redraw gutter on buffer save / open.

" Grepper
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:grepper={ 'tools': ['rg', 'git'], 'next_tool': '<C-g>' }

" Run grepper on motion and selection.
nmap gs <Plug>(GrepperOperator)
xmap gs <Plug>(GrepperOperator)

" Open the grepper prompt.
nnoremap <Leader>G :Grepper<CR>

" Search for the word under the cursor.
nnoremap <Leader>* :Grepper -cword -noprompt<CR>

" NERDTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle NERDTree buffer.
nnoremap <Leader>t :NERDTreeToggle<CR>

" Rust.Vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:rust_recommended_style=0

" TrollStopper
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup AutoTrollStopper
  autocmd!
  autocmd BufWritePre * silent! :TrollStop<CR>
augroup END

" UltiSnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:UltiSnipsExpandTrigger='<C-Space>'
let g:UltiSnipsListSnippets='<C-Tab>'
let g:UltiSnipsJumpForwardTrigger='<C-j>'
let g:UltiSnipsJumpBackwardTrigger='<C-k>'

" YouCompleteMe
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" YCM doesn't have completers for some filetypes.
if !exists('g:ycm_filetype_blacklist')
  let g:ycm_filetype_blacklist={}
endif
let g:ycm_filetype_blacklist.help=1
let g:ycm_filetype_blacklist.vim=1

" Load extra conf without prompting.
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0

" Automatically open and close the preview window during completion.
let g:ycm_add_preview_to_completeopt=1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_autoclose_preview_window_after_insertion=1

" Perform completion while writing comments and strings.
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings=1

" Do not try to complete using text from comments or strings.
let g:ycm_collect_identifiers_from_comments_and_strings=0

" Get completion text from language-specific syntax files.
let g:ycm_seed_identifiers_with_syntax=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Behavior
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always use Linux keybindings (even on Windows).
behave xterm
" Enable syntax highlighting.
if !exists('g:syntax_on')
  syntax enable
endif
" Load filetype files for default file types, custom file types, and file
" indentation rules.
filetype plugin indent on

" Treat all files like UTF-8.
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8

" Resize splits on window resize.
augroup AutoResizeSplits
  autocmd!
  autocmd VimResized * wincmd =
augroup END

" Options
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autowrite                   " Write before executing the 'make' command.
set backspace=indent,eol,start  " Allow <BS> to go over indents, eol, and start of insert.
set colorcolumn=80              " Highlight the 80th column.
set cpoptions+=$                " Show dollar sign at end of text to be changed.
set cursorline                  " Highlight current line.
set dictionary+=~/.vim/dictionary/english-freq
set expandtab                   " Expand tabs into spaces.
set foldcolumn=1                " Add N columns to show fold levels and boundaries.
set foldmethod=indent           " Set fold method (manual,indent,expr,syntax,diff,marker).
set hidden                      " Use hidden buffers so unsaved buffers can go to the background.
set history=500                 " Set number of lines for vim to remember.
set hlsearch                    " Highlight all search matches.
set ignorecase                  " Ignore case in regular expressions.
set incsearch                   " Immediately highlight search matches.
set laststatus=2                " Show status line even where there is only one window.
set lazyredraw                  " Redraw faster.
set linespace=0                 " Adjust relative line height.
set list                        " Enable listchars for undesireable whitespace and non-visible wrapped text.
set listchars=tab:➤-,trail:·,extends:»,precedes:«
set modeline                    " Check files for a modeline to apply config settings.
set nobomb                      " Remove Byte Order Mark from files.
set noerrorbells                " No beeps on errors.
set nofoldenable                " Do not open file folded.
set nopaste                     " Do not default to paste mode.
set noswapfile                  " Don't use swap files.
set number                      " Display line numbers.
set path=,,.,**,/usr/include,/usr/local/include
set scrolloff=5                 " Keep min of N lines above/below cursor.
set shellslash                  " Use forward slashes regardless of OS.
set shiftwidth=2                " Auto-indent N spaces each indent level.
set showcmd                     " Show partial commands in the status line.
set showmatch                   " Show matching () {} etc..
set showmode                    " Show current editor mode (insert, visual, replace, etc).
set sidescrolloff=10            " Keep min of N columns right/left cursor.
set smartcase                   " Searches are case-sensitive only if caps used.
set smartindent                 " Maintains most indentation and adds extra level when nesting.
set smarttab                    " Tabs and backspaces at the start of a line indent the line one level.
set softtabstop=2               " Using a TAB inserts N spaces.
set splitright splitbelow       " Open splits below and to the right.
set synmaxcol=2000              " Only matches syntax on first N columns of each line.
set tabstop=2                   " TABs expand to N spaces.
set textwidth=80                " Hard wrap at N characters.
set ttyfast                     " Smoother redrawing.
set viminfo='20,\"500,%         " Adjust viminfo contents.
set virtualedit=block           " Allow the cursor to move to columns without text.
set wildignore=*.sw?,*.pyc      " Ignore generated files in the source tree.
set wildignorecase              " Tab completion is case-insensitive.
set wildmenu                    " Tab completion navigable menu is enabled.
set wildmode=list:longest,full  " Tab completion lists matches, then opens wildmenu on next <Tab>.
set wrap                        " Soft wrap lines.
set wrapscan                    " Searching wraps to start of file when end is reached.

" Toggles for invertible settings.
nnoremap <Leader>h :set invhlsearch<CR>
nnoremap <Leader>n :set invnumber<CR>
nnoremap <Leader>p :set invpaste<CR>
nnoremap <Leader>w :set invwrap<CR>

" Completion settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options:
"   .        scan the current buffer ('wrapscan' is ignored)
"   w        scan buffers from other windows
"   b        scan other loaded buffers that are in the buffer list
"   u        scan the unloaded buffers that are in the buffer list
"   U        scan the buffers that are not in the buffer list
"   k        scan the files given with the 'dictionary' option
"   kspell   use the currently active spell checking |spell|
"   k{dict}  scan the file {dict}
"   s        scan the files given with the 'thesaurus' option
"   s{tsr}   scan the file {tsr}
"   i        scan current and included files
"   d        scan current and included files for defined name or macro |i_CTRL-X_CTRL-D|
"   t        tag completion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set complete=.,w,b,u,t,i
augroup ProseCompletion
  autocmd!
  autocmd FileType markdown,gitcommit,text setlocal complete+=k spell
augroup END

" Text formatting settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options:
"   t  Auto-wrap text using textwidth. (default)
"   c  Auto-wrap comments; insert comment leader. (default)
"   q  Allow formatting of comments with "gq". (default)
"   r  Insert comment leader after hitting <Enter>.
"   o  Insert comment leader after hitting 'o' or 'O' in command mode.
"   n  Auto-format lists, wrapping to text after the list bullet char.
"   l  Don't auto-wrap if a line is already longer than textwidth.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set formatoptions=tcqronl

" Enable mouse scrolling in selected modes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options:
"   a  All
"   c  Command
"   i  Insert
"   n  Normal
"   v  Visual
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set mouse=

" Color theme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256                  " Use as many colors as your terminal supports.
silent! colorscheme solarized " Must be silent so Plug does not fail when installing for the first time.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Basics
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Make y behave like all other capitals (yank to end of line).
nnoremap Y y$

" No one ever intends to enter ex-mode. Make it harder by rebinding to QQ.
nnoremap Q <nop>
nnoremap QQ Q

" Smash to exit insert mode because <Esc> is too far away from home row.
inoremap kj <Esc>

" Navigation
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use C-hjkl to change windows.
nnoremap <C-h> <C-w><Left>
nnoremap <C-j> <C-w><Down>
nnoremap <C-k> <C-w><Up>
nnoremap <C-l> <C-w><Right>

" Use C-t to change tabs.
nnoremap <C-t>e :tabnew<CR>
nnoremap <C-t>% :tabnew<Space>%<CR>
nnoremap <C-t>n :tabnext<CR>
nnoremap <C-t>p :tabprevious<CR>
nnoremap <C-t>d :tabclose<CR>
